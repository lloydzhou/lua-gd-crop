        location ~ ^/crop/([\d-]+)x([\d-]+)/(.*) {
            set $width $1; 
            set $height $2; 
            rewrite    /crop/([\d-]+)x([\d-]+)/(.*) /download/$3 break;
            proxy_pass http://image.example.com;
            proxy_store /tmp/wallpaper;
            add_header Content-Disposition 'attachment; filename="$3.jpg"';
            header_filter_by_lua ' ngx.header.content_length = nil ';  
            body_filter_by_lua '
                 local chunk, eof = ngx.arg[1], ngx.arg[2]
                 local buffered = ngx.ctx.buffered
                 if not buffered then
                     buffered = {}
                     ngx.ctx.buffered = buffered
                 end 
                 if eof then
                     local whole = table.concat(buffered)
                     ngx.ctx.buffered = nil 
                     local gd = require "gd"
                     if string.len(whole) <=0 then return end 
                     --local cjson = require "cjson"
                     --ngx.log(ngx.ERR, "width: " .. ngx.var.width .. ", height: ".. ngx.var.height) 
                     local src = gd.createFromJpegStr(whole)
                     local colors = src:colorsTotal()
                     local w, h = src:sizeXY()
                     --ngx.log(ngx.ERR, "src width: " .. w .. ", src height: ".. h .. ", colors: ".. colors) 
                     local dx, dy, dw, dh = 0,0, tonumber(ngx.var.width), tonumber(ngx.var.height)
                     local cx, cy = w/2, h/2 
                     local k = math.min(w/dw, h/dh)
                     local sw, sh = k * dw, k * dh
                     --ngx.log(ngx.ERR, cjson.encode({dx, dy, dw, dh, w, h, k, w/dw, h/dh, cx, cy, sw, sh})) 
                     local sx, sy = cx - sw/2, cy - sh/2
                     --ngx.log(ngx.ERR, cjson.encode({dx, dy, dw, dh, sx, sy, sw, sh, w, h, k, cx, cy, sw, sh})) 
                     local dis = gd.createTrueColor(dw, dh) 
                     --local dis = gd.create(dw, dh) 

                     if colors == 0 then
                         dis:saveAlpha(1)
                         dis:alphaBlending(0)
                     end
                     gd.colorTransparent(src, -1)
                     gd.copyResampled(dis, src, dx, dy, sx, sy, dw, dh, sw, sh)
                     if colors then dis:trueColorToPalette(1, 256) end
                     ngx.arg[1] = dis:jpegStr(90)
                     ngx.arg[2] = true
                     --ngx.exit(0)
                 else
                     buffered[#buffered + 1] = chunk
                     ngx.arg[1] = nil
                 end
            ';
        }

